!<arch>
0-isupper.c/    0           0     0     644     228       `
#include "main.h"

/**
 * _isupper - checks for uppercase character
 * @c: character to check
 * Return: 1 if c is uppercase, 0 otherwise
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     327       `
#include "main.h"

/**
 * _memset - fills memorry with a constant byte
 * @n: the first memory bytes
 * @s: pointer to the memory byte
 * @b: constant byte
 * Return: a pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
	s[i] = b;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     370       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: the destination string
 * @src: the source string
 * Return: A pointer the the resulting string dest
 */

char *_strcat(char *dest, char *src)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}

	while (*src != '\0')
	{
		*ptr = *src;
			ptr++;
			src++;
	}
	*ptr = '\0';


return (dest);
}
100-atoi.c/     0           0     0     644     394       `
#include "main.h"
/**
 * _atoi - changes a string into an integer
 *
 * @s: the string input parameter
 *
 * Return: change integer from string
*/
int _atoi(char *s)
{
	unsigned int num = 0;
	int sign = 1;

	for (; *s != '\0'; s++)
	{
		if (*s == '-')
			sign *= -1;
		else if (*s >= '0' && *s <= '9')
			num = (num * 10) + (*s - '0');
		else if (num > 0)
			break;
	}

	return (num * sign);
}
1-isdigit.c/    0           0     0     644     228       `
#include "main.h"

/**
 * _isdigit - checks for a digit 0 through 9
 * @c: character to check for
 * Return: 1 if c is digit, 0 otherwise
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     318       `
#include "main.h"

/**
 * _memcpy - a function that copies memory area
 * @n: number of bytes to copied
 * @src: source
 * @dest: destination
 * Return: a pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     407       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * @dest: destination string
 * @src: source string
 * @n: max no of bytes to concatenate
 * Return: a pointer to the resulting string dest
 */

char *_strncat(char *dest, char *src, int n)
{
	char *ptr = dest;

	while (*ptr != '\0')
	{
		ptr++;
	}

	while (*src != '\0' && n > 0)
	{
		*ptr = *src;
		ptr++;
		src++;
		n--;
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     385       `
#include "main.h"

/**
 * _strchr - a function that locates a character in a string
 * @s: the string
 * @c: the character to check for
 * Return: a pointer to the first occurrence of c in the string s,
 * or NULL otherwise
 */

char *_strchr(char *s, char c)
{
	while (*s != '\0')
	{
		if (*s == c)
		{
			return (s);
		}
		s++;
	}
	if (*s == c)
	{
		return (s);
	}
	return ('\0');
}

2-strlen.c/     0           0     0     644     222       `
#include "main.h"

/**
 * _strlen - returns the length of a string
 * @s: The char character
 * Return: result
 */

int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     396       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: destination string
 * @src: source string
 * @n: max num of character to be copied
 * Return: a pointer to the resulting string dest
 */

char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;

	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}
3-islower.c/    0           0     0     644     232       `
#include "main.h"

/**
 * _islower - checks for lowercase character
 * @c: The character to be checked
 * Return: 1 for lowercase, 0 otherwise
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	return (0);
}
3-puts.c/       0           0     0     644     220       `
#include "main.h"

/**
 * _puts - prints a string followed by a newline
 * @str: string to be printed
 * Return: None
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     301       `
#include "main.h"
/**
 * _strcmp - compare string value
 * @s1: input value
 * @s2: input value
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     554       `
#include "main.h"

/**
 * _strspn - a function that gets the length of a prefix substring
 * @s: initial segemnt
 * @accept: string to find
 * Return: number of bytes in s which consist of bytes from accept
 */

unsigned int _strspn(char *s, char *accept)
{
	unsigned int i, j;
	unsigned int count = 0;
	int found;

	for (i = 0; s[i] != '\0'; i++)
	{
		found = 0;
			for (j = 0; accept[j] != '\0'; j++)
			{
				if (s[i] == accept[j])
				{
					found = 1;
					break;
				}
			}
		if (!found)
		{
			return (count);
		}
		count++;
	}
	return (count);
}
4-isalpha.c/    0           0     0     644     256       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic character
 * @c: character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */

int _isalpha(int c)

{
if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
{
	return (1);
}
return (0);
}
4-strpbrk.c/    0           0     0     644     458       `
#include "main.h"

/**
 * _strpbrk - a function that searches a string for any bytes
 * @s: the first occurence in the string
 * @accept: the string
 * Return: a pointer to the byte in s that matches accept
 * or NULL if no such byte is found
 */

char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i] != '\0'; i++)
	{
		for (j = 0; accept[j] != '\0'; j++)
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
		}
	}
	return ('\0');
}
5-strstr.c/     0           0     0     644     627       `
#include "main.h"

/**
 * _strstr - locates a substring
 * @haystack: the pointer to the null terminated
 * string to be searched
 * @needle: the pointer to the null terminated
 * string reperesenting the substring to be
 * searched for
 * Return: a pointer to the begening of the located
 * substring or NULL otherwise
 */

char *_strstr(char *haystack, char *needle)
{
	int i, j;

	for (i = 0; haystack[i] != '\0'; i++)
	{
		int k = i;

		for (j = 0; needle[j] != 0 && haystack[k] != '\0'
				&& needle[j] == haystack[k]; j++, k++)
		{

		}
			if (needle[j] == '\0')
			{
				return (&haystack[i]);
			}
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     223       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @i: integer to compute
 * Return: The absolute value of the input integer
 */


int _abs(int i)
{
	if (i < 0)
	return (-i);
	else
	return (i);
}

9-strcpy.c/     0           0     0     644     429       `
#include "main.h"

/**
 * _strcpy - copies the string pointed to by src
 * including the terminating null (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the destination buffer
 * @src: pointer to the source string
 * Return: pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	char *dest_start = dest;

	while (*src != '\0')
	{
		*dest = *src;
		dest++;
		src++;
	}
	*dest = '\0';

	return (dest_start);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

